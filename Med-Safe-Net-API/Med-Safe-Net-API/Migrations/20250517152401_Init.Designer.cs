// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Med_Safe_Net_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250517152401_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = new byte[] { 201, 23, 181, 76, 60, 34, 218, 222, 68, 211, 236, 136, 17, 113, 173, 231, 15, 140, 51, 107, 201, 177, 189, 28, 74, 126, 21, 219, 90, 47, 166, 232, 240, 162, 227, 33, 31, 120, 237, 144, 190, 53, 138, 52, 46, 164, 129, 17, 141, 254, 143, 136, 217, 31, 28, 120, 165, 64, 221, 203, 49, 161, 222, 127 },
                            PasswordSalt = new byte[] { 20, 224, 135, 30, 129, 199, 15, 238, 5, 172, 144, 192, 253, 129, 39, 9, 169, 13, 163, 121, 173, 111, 33, 47, 32, 200, 188, 99, 217, 98, 32, 242, 236, 158, 255, 187, 214, 157, 192, 212, 169, 116, 86, 131, 201, 255, 246, 105, 209, 169, 182, 66, 155, 167, 88, 245, 247, 150, 118, 211, 150, 196, 217, 196, 208, 116, 246, 217, 142, 149, 171, 5, 87, 211, 101, 196, 135, 149, 230, 215, 48, 6, 202, 82, 130, 129, 113, 187, 206, 233, 162, 38, 89, 150, 251, 25, 237, 32, 133, 116, 106, 130, 130, 145, 120, 124, 199, 26, 124, 201, 34, 76, 59, 165, 109, 60, 103, 112, 77, 42, 130, 10, 39, 38, 160, 242, 191, 6 },
                            Username = "admin"
                        },
                        new
                        {
                            Id = -2,
                            DateOfBirth = new DateTime(1990, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cg1@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            PasswordHash = new byte[] { 201, 23, 181, 76, 60, 34, 218, 222, 68, 211, 236, 136, 17, 113, 173, 231, 15, 140, 51, 107, 201, 177, 189, 28, 74, 126, 21, 219, 90, 47, 166, 232, 240, 162, 227, 33, 31, 120, 237, 144, 190, 53, 138, 52, 46, 164, 129, 17, 141, 254, 143, 136, 217, 31, 28, 120, 165, 64, 221, 203, 49, 161, 222, 127 },
                            PasswordSalt = new byte[] { 20, 224, 135, 30, 129, 199, 15, 238, 5, 172, 144, 192, 253, 129, 39, 9, 169, 13, 163, 121, 173, 111, 33, 47, 32, 200, 188, 99, 217, 98, 32, 242, 236, 158, 255, 187, 214, 157, 192, 212, 169, 116, 86, 131, 201, 255, 246, 105, 209, 169, 182, 66, 155, 167, 88, 245, 247, 150, 118, 211, 150, 196, 217, 196, 208, 116, 246, 217, 142, 149, 171, 5, 87, 211, 101, 196, 135, 149, 230, 215, 48, 6, 202, 82, 130, 129, 113, 187, 206, 233, 162, 38, 89, 150, 251, 25, 237, 32, 133, 116, 106, 130, 130, 145, 120, 124, 199, 26, 124, 201, 34, 76, 59, 165, 109, 60, 103, 112, 77, 42, 130, 10, 39, 38, 160, 242, 191, 6 },
                            Username = "caregiver1"
                        },
                        new
                        {
                            Id = -3,
                            DateOfBirth = new DateTime(1992, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cg2@example.com",
                            FirstName = "Bob",
                            LastName = "Johnson",
                            PasswordHash = new byte[] { 201, 23, 181, 76, 60, 34, 218, 222, 68, 211, 236, 136, 17, 113, 173, 231, 15, 140, 51, 107, 201, 177, 189, 28, 74, 126, 21, 219, 90, 47, 166, 232, 240, 162, 227, 33, 31, 120, 237, 144, 190, 53, 138, 52, 46, 164, 129, 17, 141, 254, 143, 136, 217, 31, 28, 120, 165, 64, 221, 203, 49, 161, 222, 127 },
                            PasswordSalt = new byte[] { 20, 224, 135, 30, 129, 199, 15, 238, 5, 172, 144, 192, 253, 129, 39, 9, 169, 13, 163, 121, 173, 111, 33, 47, 32, 200, 188, 99, 217, 98, 32, 242, 236, 158, 255, 187, 214, 157, 192, 212, 169, 116, 86, 131, 201, 255, 246, 105, 209, 169, 182, 66, 155, 167, 88, 245, 247, 150, 118, 211, 150, 196, 217, 196, 208, 116, 246, 217, 142, 149, 171, 5, 87, 211, 101, 196, 135, 149, 230, 215, 48, 6, 202, 82, 130, 129, 113, 187, 206, 233, 162, 38, 89, 150, 251, 25, 237, 32, 133, 116, 106, 130, 130, 145, 120, 124, 199, 26, 124, 201, 34, 76, 59, 165, 109, 60, 103, 112, 77, 42, 130, 10, 39, 38, 160, 242, 191, 6 },
                            Username = "caregiver2"
                        },
                        new
                        {
                            Id = -4,
                            DateOfBirth = new DateTime(1952, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient@example.com",
                            FirstName = "Eve",
                            LastName = "Doe",
                            PasswordHash = new byte[] { 201, 23, 181, 76, 60, 34, 218, 222, 68, 211, 236, 136, 17, 113, 173, 231, 15, 140, 51, 107, 201, 177, 189, 28, 74, 126, 21, 219, 90, 47, 166, 232, 240, 162, 227, 33, 31, 120, 237, 144, 190, 53, 138, 52, 46, 164, 129, 17, 141, 254, 143, 136, 217, 31, 28, 120, 165, 64, 221, 203, 49, 161, 222, 127 },
                            PasswordSalt = new byte[] { 20, 224, 135, 30, 129, 199, 15, 238, 5, 172, 144, 192, 253, 129, 39, 9, 169, 13, 163, 121, 173, 111, 33, 47, 32, 200, 188, 99, 217, 98, 32, 242, 236, 158, 255, 187, 214, 157, 192, 212, 169, 116, 86, 131, 201, 255, 246, 105, 209, 169, 182, 66, 155, 167, 88, 245, 247, 150, 118, 211, 150, 196, 217, 196, 208, 116, 246, 217, 142, 149, 171, 5, 87, 211, 101, 196, 135, 149, 230, 215, 48, 6, 202, 82, 130, 129, 113, 187, 206, 233, 162, 38, 89, 150, 251, 25, 237, 32, 133, 116, 106, 130, 130, 145, 120, 124, 199, 26, 124, 201, 34, 76, 59, 165, 109, 60, 103, 112, 77, 42, 130, 10, 39, 38, 160, 242, 191, 6 },
                            Username = "patient1"
                        });
                });

            modelBuilder.Entity("API.Entities.HeartRate", b =>
                {
                    b.Property<int>("HeartRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Measurement")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HeartRateId");

                    b.HasIndex("UserId");

                    b.ToTable("HeartRates");
                });

            modelBuilder.Entity("API.Entities.HighHeartRate", b =>
                {
                    b.Property<int>("HighHeartRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Confirm")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Measurement")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("TimeOfConfirmation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HighHeartRateId");

                    b.HasIndex("UserId");

                    b.ToTable("HighHeartRates");
                });

            modelBuilder.Entity("API.Entities.SuddenMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Confirm")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TimeOfConfirmation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovementId");

                    b.HasIndex("UserId");

                    b.ToTable("SuddenMovements");
                });

            modelBuilder.Entity("Med_Safe_Net_API.Entities.AppRole", b =>
                {
                    b.Property<int>("AppRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppRoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppRoleId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            AppRoleId = 3,
                            AppRoleName = "Administrator"
                        },
                        new
                        {
                            AppRoleId = 2,
                            AppRoleName = "Caregiver"
                        },
                        new
                        {
                            AppRoleId = 1,
                            AppRoleName = "Patient"
                        });
                });

            modelBuilder.Entity("Med_Safe_Net_API.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserRoleId");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = -1,
                            AppRoleId = 3,
                            Id = -1
                        },
                        new
                        {
                            UserRoleId = -2,
                            AppRoleId = 2,
                            Id = -2
                        },
                        new
                        {
                            UserRoleId = -3,
                            AppRoleId = 1,
                            Id = -3
                        });
                });

            modelBuilder.Entity("API.Entities.HeartRate", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("HeartRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.HighHeartRate", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("HighHeartRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.SuddenMovement", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("SuddenMovements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Med_Safe_Net_API.Entities.UserRole", b =>
                {
                    b.HasOne("Med_Safe_Net_API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("HeartRates");

                    b.Navigation("HighHeartRates");

                    b.Navigation("SuddenMovements");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Med_Safe_Net_API.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
